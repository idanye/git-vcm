#!/bin/bash

# Ensure we're inside a Git repo
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "‚ùå You are not inside a Git repository."
  exit 1
fi

# Check for staged changes
if ! git diff --cached --quiet; then
  :
else
  echo "‚ö†Ô∏è  No staged changes to commit."
  exit 0
fi

# Check gum is installed
if ! command -v gum &>/dev/null; then
  echo "‚ùå gum is not installed. Install it from https://github.com/charmbracelet/gum"
  exit 1
fi

# Get branch name and extract prefix
BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
PREFIX=$(echo "$BRANCH" | grep -oE '^[A-Z]+-[0-9]+')

if [ -z "$PREFIX" ]; then
  echo "‚ö†Ô∏è  Could not extract prefix from branch '$BRANCH'."
  read -p "Enter a prefix manually (or leave blank to skip): " PREFIX
  echo
fi

# Define types with emoji for display
TYPES_DISPLAY=(
  "üé∏ feat:       A new feature"
  "üêõ fix:        A bug fix"
  "‚úèÔ∏è  docs:       Documentation only changes"
  "üíÑ style:      Markup, white-space, formatting, etc."
  "üí° refactor:   A code change that neither fixes a bug nor adds a feature"
  "‚ö°Ô∏è perf:       A code change that improves performance"
  "üíç test:       Adding missing tests"
  "ü§ñ chore:      Build process or auxiliary tool changes"
  "üé° ci:         CI related changes"
)

# Corresponding type keys (no emoji, used in commit message)
TYPES_KEYS=(
  "feat"
  "fix"
  "docs"
  "style"
  "refactor"
  "perf"
  "test"
  "chore"
  "ci"
)

# Show gum menu with emoji
SELECTED_TYPE=$(printf "%s\n" "${TYPES_DISPLAY[@]}" | gum choose \
  --header "? Select the type of change that you're committing: (Use arrow keys to choose)" \
  --header.foreground="#39dae9" \
  --selected.background="#303030" \
  --selected.foreground="#80CBC4")

# Exit if the user cancelled
if [ -z "$SELECTED_TYPE" ]; then
  echo "‚ùå Commit cancelled."
  exit 1
fi

# Find index of selected item
TYPE_INDEX=$(printf "%s\n" "${TYPES_DISPLAY[@]}" | grep -nFx "$SELECTED_TYPE" | cut -d: -f1)

if [ -z "$TYPE_INDEX" ]; then
  echo "‚ùå Invalid selection."
  exit 1
fi

TYPE_KEY="${TYPES_KEYS[$((TYPE_INDEX - 1))]}"

# Short message prompt with limit
MESSAGE=$(gum input \
  --header "? Write a short description of the change:" \
  --placeholder "$TYPE_KEY " \
  --header.foreground="#39dae9" \
  --prompt.foreground="#39dae9")

if [ -z "$MESSAGE" ]; then
  echo "‚ùå Commit message must be at least 3 characters."
  exit 1
fi

# Compose final message: VAL-1234 [feat] Add login flow
if [ -n "$PREFIX" ]; then
  FINAL_MESSAGE="$PREFIX [$TYPE_KEY] $MESSAGE"
else
  FINAL_MESSAGE="[$TYPE_KEY] $MESSAGE"
fi

# Confirm and commit
printf "‚úÖ Final commit message:\n%s\n\n" "$FINAL_MESSAGE"

gum confirm "Commit with this message?" --selected.foreground="#39dae9" && \
  git commit -m "$FINAL_MESSAGE" || \
  echo "‚ùå Commit cancelled."
